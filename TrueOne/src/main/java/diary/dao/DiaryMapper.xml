<?xml version="1.0" encoding="UTF-8" ?>  <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--这块等于dao接口的实现 namespace必须和接口的类路径一样 -->
<mapper namespace="diary.dao.DiaryMapper">
    <!--type是在configuration.xml里定义过的typeAlias -->
    <resultMap id="DiaryResult" type="diary.dto.Diary">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="diary_text" property="content" jdbcType="VARCHAR"/>
        <result column="topic" property="topic" jdbcType="VARCHAR"/>
        <result column="author" property="authorName" jdbcType="VARCHAR"/>
        <result column="authorid" property="authorId" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <insert id="addDiary" parameterType="Diary" useGeneratedKeys="true"
            keyProperty="id">
		insert into
		tb_diary(diary_text,topic,author,authorid,update_time,create_time)
		values(#{content},#{topic},#{authorName},#{authorId},#{createTime},#{updateTime})
</insert>

    <update id="updateDiary"
            parameterType="Diary">
		update tb_diary
		set
		diary_text=#{content:VARCHAR},
		topic=#{topic:VARCHAR},
		authorName=#{authorName:VARCHAR},
		authorId=#{authorId:VARCHAR},
		update_time=#{updateTime:VARCHAR}
		where id=#{id:INTEGER}
</update>

    <select id="findDiary" parameterType="int" resultMap="DiaryResult">
		select * from tb_diary where id = #{id:INTEGER}
</select>

    <delete id="deleteDiary"  parameterType="int">
		delete		from tb_diary where
		id=#{id:INTEGER}
</delete>

    <select id="countDiary" resultType="int">
		select count(*) from tb_diary
</select>

    <select id="listDiary" resultMap="DiaryResult">
		select * from tb_diary order by id
</select>

</mapper>
